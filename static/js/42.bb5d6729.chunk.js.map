{"version":3,"file":"static/js/42.bb5d6729.chunk.js","mappings":"wOAEMA,EAAYC,EAAAA,EAAAA,IAAH,+SAiBTC,EAAgBD,EAAAA,EAAAA,GAAH,+DAKbE,EAAYF,EAAAA,EAAAA,KAAH,2DAEJ,SAAAG,GACP,OAAOA,EAAMC,KACd,IAGGC,EAAkBL,EAAAA,EAAAA,IAAH,4GAOfM,EAAaN,EAAAA,EAAAA,OAAH,gNAKM,SAAAG,GAAK,OAAIA,EAAMI,UAAV,IAMhB,SAAAJ,GACP,OAAIA,EAAMK,eAAiBL,EAAMM,UACxB,IAEF,CACR,I,SCfH,EA7BoB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACrB,GAA8CC,EAAAA,EAAAA,UAAS,GAAvD,eAAOC,EAAP,KAAwBC,EAAxB,KAEA,OACE,+BACE,UAACd,EAAD,YACE,UAACE,EAAD,WAAe,kBACG,KAChB,SAACC,EAAD,CAAWE,MAAOM,EAAOE,GAAiBR,MAA1C,SACGM,EAAOE,GAAiBE,YAI7B,SAACT,EAAD,UACGK,EAAOK,KAAI,WAAmBC,GAAnB,IAAGF,EAAH,EAAGA,MAAOV,EAAV,EAAUA,MAAV,OACV,SAACE,EAAD,CAEEC,WAAYH,EACZa,QAAS,kBAAMJ,EAAmBG,EAAzB,EACTR,aAAcQ,EACdP,UAAWG,GAJNE,EAFG,UAarB,ECnCKI,EAAY,CAChB,CAAEJ,MAAO,MAAOV,MAAO,WACvB,CAAEU,MAAO,OAAQV,MAAO,WACxB,CAAEU,MAAO,QAASV,MAAO,WACzB,CAAEU,MAAO,OAAQV,MAAO,WACxB,CAAEU,MAAO,SAAUV,MAAO,YAW5B,EARwB,WACtB,OACE,+BACE,SAAC,EAAD,CAAaM,OAAQQ,KAG1B,C","sources":["components/ColorPicker/ColorPicker.styled.jsx","components/ColorPicker/ColorPicker.jsx","pages/ColorPickerPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  gap: 20px;\n\n  width: 800px;\n  min-height: 120px;\n  margin-top: 20px;\n  padding: 20px 0;\n\n  background-color: #332b00;\n  border: 2px solid #f2ab26;\n  border-radius: 20px;\n`;\n\nconst SelectedColor = styled.h2`\n  font-size: 20px;\n  color: #f2ab26;\n`;\n\nconst ColorSpan = styled.span`\n  font-size: 20px;\n  color: ${props => {\n    return props.color;\n  }};\n`;\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n`;\n\nconst ColorBlock = styled.button`\n  display: flex;\n\n  width: 60px;\n  height: 60px;\n  background-color: ${props => props.blockColor};\n  border: 2px solid white;\n  outline: none;\n\n  cursor: pointer;\n  transition: 300ms;\n  scale: ${props => {\n    if (props.currentIndex === props.activeIdx) {\n      return 1.2;\n    }\n    return 1;\n  }};\n`;\n\nexport { Container, SelectedColor, ColorSpan, ButtonContainer, ColorBlock };\n","import { useState } from 'react';\n// PureComponent\nimport {\n  Container,\n  SelectedColor,\n  ColorSpan,\n  ButtonContainer,\n  ColorBlock,\n} from './ColorPicker.styled';\n\nconst ColorPicker = ({ colors }) => {\n  const [activeOptionIdx, setActiveOptionIdx] = useState(1);\n\n  return (\n    <>\n      <Container>\n        <SelectedColor>\n          Selected color:{' '}\n          <ColorSpan color={colors[activeOptionIdx].color}>\n            {colors[activeOptionIdx].label}\n          </ColorSpan>\n        </SelectedColor>\n\n        <ButtonContainer>\n          {colors.map(({ label, color }, index) => (\n            <ColorBlock\n              key={label}\n              blockColor={color}\n              onClick={() => setActiveOptionIdx(index)}\n              currentIndex={index}\n              activeIdx={activeOptionIdx}\n            />\n          ))}\n        </ButtonContainer>\n      </Container>\n    </>\n  );\n};\n\nexport default ColorPicker;\n\n// export default class ColorPicker extends PureComponent {\n//   state = {\n//     activeOptionIdx: 1,\n//   };\n\n//? або використовувати PureComponent - це для того щоб не ререндерилось то що ти вже вибрав\n// shouldComponentUpdate(nextProps, nextState) {\n//   return nextState.activeOptionIdx !== this.state.activeOptionIdx;\n// }\n\n//   setActiveBtn = index => {\n//     this.setState(() => ({ activeOptionIdx: index }));\n//   };\n\n//   render() {\n//     const { activeOptionIdx } = this.state;\n//     const { colors } = this.props;\n//     const activeOption = this.props.colors[activeOptionIdx];\n\n//     return (\n//       <>\n//         <Container>\n//           <SelectedColor>\n//             Selected color:{' '}\n//             <ColorSpan color={activeOption.color}>\n//               {activeOption.label}\n//             </ColorSpan>\n//           </SelectedColor>\n\n//           <ButtonContainer>\n//             {colors.map(({ label, color }, index) => (\n//               <ColorBlock\n//                 key={label}\n//                 blockColor={color}\n//                 onClick={() => this.setActiveBtn(index)}\n//                 currentIndex={index}\n//                 activeIdx={activeOptionIdx}\n//               />\n//             ))}\n//           </ButtonContainer>\n//         </Container>\n//       </>\n//     );\n//   }\n// }\n","import ColorPicker from 'components/ColorPicker';\n\nconst colorPack = [\n  { label: 'red', color: '#aa0000' },\n  { label: 'blue', color: '#0077ff' },\n  { label: 'green', color: '#008800' },\n  { label: 'pink', color: '#aa00aa' },\n  { label: 'lasure', color: '#00bb8c' },\n];\n\nconst ColorPickerPage = () => {\n  return (\n    <>\n      <ColorPicker colors={colorPack} />\n    </>\n  );\n};\n\nexport default ColorPickerPage;\n"],"names":["Container","styled","SelectedColor","ColorSpan","props","color","ButtonContainer","ColorBlock","blockColor","currentIndex","activeIdx","colors","useState","activeOptionIdx","setActiveOptionIdx","label","map","index","onClick","colorPack"],"sourceRoot":""}
{"version":3,"file":"static/js/598.e960193b.chunk.js","mappings":"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","sources":["redux/selectors.js","components/TodoManager/TodoManager.styled.jsx","components/TodoManager/AddTodo/AddTodo.styled.jsx","components/TodoManager/AddTodo/AddTodo.jsx","components/TodoManager/TodoFilter/TodoFilter.styled.jsx","components/TodoManager/TodoFilter/TodoFilter.jsx","components/TodoManager/TodoManager.jsx","pages/Home.jsx"],"sourcesContent":["export const getTodos = state => state.todos;\n","import styled from '@emotion/styled';\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n\n  width: 800px;\n  padding: 20px;\n  margin-top: 20px;\n\n  background-color: #332b00;\n  border: 2px solid #f2ab26;\n  border-radius: 20px;\n`;\n\nconst TodoList = styled.ul`\n  list-style: none;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n`;\n\nconst Todo = styled.li`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  width: 600px;\n`;\n\nconst TodoText = styled.p`\n  width: 300px;\n  font-size: 20px;\n  color: #f2ab26;\n  color: ${props => {\n    if (props.isCompleted === true) {\n      return '#00f90f';\n    } else if (props.isCompleted === false) {\n      return '#ff0000';\n    }\n    return '#f2ab26';\n  }};\n`;\n\nconst ChangeIsCompleted = styled.button`\n  width: 120px;\n  height: 40px;\n\n  background-color: #332b00;\n  border-radius: 16px;\n  outline: none;\n  border: 2px solid#f2ab26;\n  color: #f2ab26;\n\n  font-size: 20px;\n\n  cursor: pointer;\n  transition: 300ms;\n\n  :hover {\n    ${props => {\n      if (props.isCompleted === true) {\n        return 'background-color: #290000;border: 2px solid #c81a00;color: #c81a00;';\n      }\n\n      return 'background-color: #003300;border: 2px solid #00f90f;color: #00f90f;';\n    }};\n  }\n`;\n\nconst RemoveTodo = styled.button`\n  width: 120px;\n  height: 40px;\n\n  background-color: #332b00;\n  border-radius: 16px;\n  outline: none;\n  border: 2px solid#f2ab26;\n  color: #f2ab26;\n\n  font-size: 20px;\n\n  cursor: pointer;\n  transition: 300ms;\n\n  :hover {\n    background-color: #290000;\n    border: 2px solid #c81a00;\n    color: #c81a00;\n  }\n`;\n\nconst TodoCounter = styled.p`\n  font-size: 20px;\n  color: #f2ab26;\n`;\n\nexport {\n  Container,\n  TodoList,\n  Todo,\n  TodoText,\n  ChangeIsCompleted,\n  RemoveTodo,\n  TodoCounter,\n};\n","import styled from '@emotion/styled';\n\nconst TodoForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n\n  width: 400px;\n`;\n\nconst FormName = styled.label`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  gap: 20px;\n\n  font-size: 24px;\n  color: #f2ab26;\n`;\n\nconst NewTodoValue = styled.textarea`\n  width: 400px;\n  max-width: 400px;\n  height: 100px;\n  min-height: 60px;\n  font-size: 20px;\n  padding: 10px;\n\n  background-color: #332b00;\n  border-radius: 16px;\n  outline: none;\n  border: 2px solid#f2ab26;\n  color: #f2ab26;\n\n  transition: 300ms;\n\n  :hover,\n  :focus {\n    border: 2px solid #00f90f;\n  }\n`;\n\nconst AddTodo = styled.button`\n  width: 280px;\n  height: 60px;\n\n  background-color: #332b00;\n  border-radius: 16px;\n  outline: none;\n  border: 2px solid#f2ab26;\n  color: #f2ab26;\n\n  font-size: 20px;\n\n  cursor: pointer;\n  transition: 300ms;\n\n  :hover {\n    background-color: #002b00;\n    border: 2px solid #00f90f;\n    color: #00f90f;\n  }\n`;\n\nexport { TodoForm, FormName, NewTodoValue, AddTodo };\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addTodo } from 'redux/todosSlice';\n// Component\n// import shortid from 'shortid';\nimport { toast } from 'react-toastify';\nimport { TodoForm, FormName, NewTodoValue, AddTodo } from './AddTodo.styled';\n\nconst TodoList = () => {\n  const [newTodoText, setNewTodoText] = useState('');\n\n  const dispatch = useDispatch();\n\n  const handleInputChange = e => {\n    const { value } = e.currentTarget;\n\n    setNewTodoText(value);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (newTodoText.trim() === '') {\n      toast.warning('Воу-воу козаче, введи щось)');\n      return;\n    }\n\n    dispatch(addTodo(newTodoText));\n\n    setNewTodoText('');\n  };\n\n  return (\n    <TodoForm onSubmit={handleSubmit}>\n      <FormName>\n        Добавити завдання:\n        <NewTodoValue\n          type=\"text\"\n          name=\"newTodoText\"\n          value={newTodoText}\n          onChange={handleInputChange}\n        />\n      </FormName>\n\n      <AddTodo type=\"submit\">Добавити</AddTodo>\n    </TodoForm>\n  );\n};\n\nexport default TodoList;\n\n// export default class TodoList extends Component {\n//   state = {\n//     newTodoText: '',\n//     // completed: 'no',\n//     // licence: false,\n//   };\n\n//   // textInputId = shortid.generate();\n\n//   // handleLicenceChange = e => {\n//   //   this.setState({ licence: e.currentTarget.checked });\n//   // };\n\n//   handleInputChange = e => {\n//     const { name, value } = e.currentTarget;\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n\n//     this.props.onSubmit(this.state.newTodoText);\n\n//     this.setState({ newTodoText: '' });\n//   };\n\n//   render() {\n//     const { newTodoText } = this.state;\n\n//     return (\n//       <TodoForm onSubmit={this.handleSubmit}>\n//         <FormName>\n//           Добавити завдання:\n//           <NewTodoValue\n//             type=\"text\"\n//             name=\"newTodoText\"\n//             value={newTodoText}\n//             onChange={this.handleInputChange}\n//           />\n//         </FormName>\n\n//         {/* <FormName htmlFor={this.textInputId} />\n//         <NewTodoValue id={this.textInputId} /> */}\n\n//         {/* <label>\n//           <input\n//             type=\"radio\"\n//             name=\"completed\"\n//             value=\"yes\"\n//             onChange={this.handleInputChange}\n//             checked={this.state.completed === 'yes'}\n//           />\n//           YES\n//         </label>\n\n//         <label>\n//           <input\n//             type=\"radio\"\n//             name=\"completed\"\n//             value=\"no\"\n//             onChange={this.handleInputChange}\n//             checked={this.state.completed === 'no'}\n//           />\n//           NO\n//         </label> */}\n\n//         {/* <input\n//           type=\"checkbox\"\n//           name=\"licence\"\n//           checked={this.state.licence}\n//           onChange={this.handleLicenceChange}\n//         /> */}\n\n//         <AddTodo type=\"submit\">Добавити</AddTodo>\n//       </TodoForm>\n//     );\n//   }\n// }\n\n//? ЗАКОМЕНТОВАНІ ПРИКЛАДИ: УНІКАЛЬНОЇ ПАРИ LABEL + INPUT ... РАДІО КНОПОК ... CHECKBOX\n","import styled from '@emotion/styled';\n\nconst FilterForm = styled.form`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n\n  width: 600px;\n`;\n\nconst FormName = styled.label`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n  margin: 0 auto;\n  font-size: 20px;\n  color: #f2ab26;\n`;\n\nconst FilterValue = styled.input`\n  width: 240px;\n  height: 40px;\n  font-size: 20px;\n  padding: 0 10px;\n\n  background-color: #332b00;\n  border-radius: 16px;\n  outline: none;\n  border: 2px solid#f2ab26;\n  color: #f2ab26;\n\n  transition: 300ms;\n\n  :hover,\n  :focus {\n    border: 2px solid #00f90f;\n  }\n`;\n\nexport { FilterForm, FormName, FilterValue };\n","import { FilterForm, FormName, FilterValue } from './TodoFilter.styled';\n\nconst TodoFilter = ({ value, onHandleChange }) => (\n  <FilterForm>\n    <FormName>\n      Фільтр:\n      <FilterValue type=\"text\" value={value} onChange={onHandleChange} />\n    </FormName>\n  </FilterForm>\n);\n\nexport default TodoFilter;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteTodo, toggleCompleted } from 'redux/todosSlice';\nimport { getTodos } from 'redux/selectors';\n\nimport {\n  Container,\n  TodoList,\n  Todo,\n  TodoText,\n  ChangeIsCompleted,\n  RemoveTodo,\n  TodoCounter,\n} from './TodoManager.styled';\n\nimport AddTodo from './AddTodo';\nimport TodoFilter from './TodoFilter';\n\nconst TodoManager = () => {\n  const todos = useSelector(getTodos).items;\n  const [filter, setFilter] = useState('');\n\n  const dispatch = useDispatch();\n\n  const totalTodosCount = todos.length;\n\n  const completedTodosCount = todos.reduce(\n    (acc, todo) => (todo.completed ? acc + 1 : acc),\n    0\n  );\n\n  const changeFilter = e => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const filteredTodos = () => {\n    const normalizedFilterValue = filter.toLowerCase();\n\n    return todos.filter(todo =>\n      todo.task.toLowerCase().includes(normalizedFilterValue)\n    );\n  };\n\n  const visibleTodos = filteredTodos();\n\n  return (\n    <Container>\n      <AddTodo />\n\n      <TodoFilter value={filter} onHandleChange={changeFilter} />\n\n      <TodoList>\n        {visibleTodos.map(({ id, task, completed }) => (\n          <Todo key={id}>\n            <TodoText isCompleted={completed}>{task}</TodoText>\n\n            <ChangeIsCompleted onClick={() => dispatch(toggleCompleted(id))}>\n              {completed ? 'Готово' : 'В процесі'}\n            </ChangeIsCompleted>\n\n            <RemoveTodo onClick={() => dispatch(deleteTodo(id))}>\n              Видалити\n            </RemoveTodo>\n          </Todo>\n        ))}\n      </TodoList>\n\n      <TodoCounter>Загальна к-сть завдань: {totalTodosCount}</TodoCounter>\n\n      <TodoCounter>К-сть виконаних завдань: {completedTodosCount}</TodoCounter>\n    </Container>\n  );\n};\n\nexport default TodoManager;\n","import TodoManager from 'components/TodoManager';\n\nconst Home = () => {\n  return (\n    <>\n      <TodoManager />\n    </>\n  );\n};\n\nexport default Home;\n"],"names":["getTodos","state","todos","Container","styled","TodoList","Todo","TodoText","props","isCompleted","ChangeIsCompleted","RemoveTodo","TodoCounter","TodoForm","FormName","NewTodoValue","AddTodo","useState","newTodoText","setNewTodoText","dispatch","useDispatch","onSubmit","e","preventDefault","trim","addTodo","toast","type","name","value","onChange","currentTarget","FilterForm","FilterValue","onHandleChange","useSelector","items","filter","setFilter","totalTodosCount","length","completedTodosCount","reduce","acc","todo","completed","visibleTodos","normalizedFilterValue","toLowerCase","task","includes","filteredTodos","map","id","onClick","toggleCompleted","deleteTodo"],"sourceRoot":""}